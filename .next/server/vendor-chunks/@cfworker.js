"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@cfworker";
exports.ids = ["vendor-chunks/@cfworker"];
exports.modules = {

/***/ "(rsc)/./node_modules/@cfworker/json-schema/dist/esm/deep-compare-strict.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@cfworker/json-schema/dist/esm/deep-compare-strict.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deepCompareStrict: () => (/* binding */ deepCompareStrict)\n/* harmony export */ });\nfunction deepCompareStrict(a, b) {\n    const typeofa = typeof a;\n    if (typeofa !== typeof b) {\n        return false;\n    }\n    if (Array.isArray(a)) {\n        if (!Array.isArray(b)) {\n            return false;\n        }\n        const length = a.length;\n        if (length !== b.length) {\n            return false;\n        }\n        for(let i = 0; i < length; i++){\n            if (!deepCompareStrict(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    if (typeofa === \"object\") {\n        if (!a || !b) {\n            return a === b;\n        }\n        const aKeys = Object.keys(a);\n        const bKeys = Object.keys(b);\n        const length = aKeys.length;\n        if (length !== bKeys.length) {\n            return false;\n        }\n        for (const k of aKeys){\n            if (!deepCompareStrict(a[k], b[k])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return a === b;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNmd29ya2VyL2pzb24tc2NoZW1hL2Rpc3QvZXNtL2RlZXAtY29tcGFyZS1zdHJpY3QuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLGtCQUFrQkMsQ0FBQyxFQUFFQyxDQUFDO0lBQ2xDLE1BQU1DLFVBQVUsT0FBT0Y7SUFDdkIsSUFBSUUsWUFBWSxPQUFPRCxHQUFHO1FBQ3RCLE9BQU87SUFDWDtJQUNBLElBQUlFLE1BQU1DLE9BQU8sQ0FBQ0osSUFBSTtRQUNsQixJQUFJLENBQUNHLE1BQU1DLE9BQU8sQ0FBQ0gsSUFBSTtZQUNuQixPQUFPO1FBQ1g7UUFDQSxNQUFNSSxTQUFTTCxFQUFFSyxNQUFNO1FBQ3ZCLElBQUlBLFdBQVdKLEVBQUVJLE1BQU0sRUFBRTtZQUNyQixPQUFPO1FBQ1g7UUFDQSxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUQsUUFBUUMsSUFBSztZQUM3QixJQUFJLENBQUNQLGtCQUFrQkMsQ0FBQyxDQUFDTSxFQUFFLEVBQUVMLENBQUMsQ0FBQ0ssRUFBRSxHQUFHO2dCQUNoQyxPQUFPO1lBQ1g7UUFDSjtRQUNBLE9BQU87SUFDWDtJQUNBLElBQUlKLFlBQVksVUFBVTtRQUN0QixJQUFJLENBQUNGLEtBQUssQ0FBQ0MsR0FBRztZQUNWLE9BQU9ELE1BQU1DO1FBQ2pCO1FBQ0EsTUFBTU0sUUFBUUMsT0FBT0MsSUFBSSxDQUFDVDtRQUMxQixNQUFNVSxRQUFRRixPQUFPQyxJQUFJLENBQUNSO1FBQzFCLE1BQU1JLFNBQVNFLE1BQU1GLE1BQU07UUFDM0IsSUFBSUEsV0FBV0ssTUFBTUwsTUFBTSxFQUFFO1lBQ3pCLE9BQU87UUFDWDtRQUNBLEtBQUssTUFBTU0sS0FBS0osTUFBTztZQUNuQixJQUFJLENBQUNSLGtCQUFrQkMsQ0FBQyxDQUFDVyxFQUFFLEVBQUVWLENBQUMsQ0FBQ1UsRUFBRSxHQUFHO2dCQUNoQyxPQUFPO1lBQ1g7UUFDSjtRQUNBLE9BQU87SUFDWDtJQUNBLE9BQU9YLE1BQU1DO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktbWFya2V0LXJlc2VhcmNoLWFnZW50Ly4vbm9kZV9tb2R1bGVzL0BjZndvcmtlci9qc29uLXNjaGVtYS9kaXN0L2VzbS9kZWVwLWNvbXBhcmUtc3RyaWN0LmpzPzNkZmEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGRlZXBDb21wYXJlU3RyaWN0KGEsIGIpIHtcbiAgICBjb25zdCB0eXBlb2ZhID0gdHlwZW9mIGE7XG4gICAgaWYgKHR5cGVvZmEgIT09IHR5cGVvZiBiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICAgIGlmIChsZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCFkZWVwQ29tcGFyZVN0cmljdChhW2ldLCBiW2ldKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZmEgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmICghYSB8fCAhYikge1xuICAgICAgICAgICAgcmV0dXJuIGEgPT09IGI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYUtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgY29uc3QgYktleXMgPSBPYmplY3Qua2V5cyhiKTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gYUtleXMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGsgb2YgYUtleXMpIHtcbiAgICAgICAgICAgIGlmICghZGVlcENvbXBhcmVTdHJpY3QoYVtrXSwgYltrXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBhID09PSBiO1xufVxuIl0sIm5hbWVzIjpbImRlZXBDb21wYXJlU3RyaWN0IiwiYSIsImIiLCJ0eXBlb2ZhIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiaSIsImFLZXlzIiwiT2JqZWN0Iiwia2V5cyIsImJLZXlzIiwiayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@cfworker/json-schema/dist/esm/deep-compare-strict.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@cfworker/json-schema/dist/esm/dereference.js":
/*!********************************************************************!*\
  !*** ./node_modules/@cfworker/json-schema/dist/esm/dereference.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dereference: () => (/* binding */ dereference),\n/* harmony export */   ignoredKeyword: () => (/* binding */ ignoredKeyword),\n/* harmony export */   initialBaseURI: () => (/* binding */ initialBaseURI),\n/* harmony export */   schemaArrayKeyword: () => (/* binding */ schemaArrayKeyword),\n/* harmony export */   schemaKeyword: () => (/* binding */ schemaKeyword),\n/* harmony export */   schemaMapKeyword: () => (/* binding */ schemaMapKeyword)\n/* harmony export */ });\n/* harmony import */ var _pointer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pointer.js */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/pointer.js\");\n\nconst schemaKeyword = {\n    additionalItems: true,\n    unevaluatedItems: true,\n    items: true,\n    contains: true,\n    additionalProperties: true,\n    unevaluatedProperties: true,\n    propertyNames: true,\n    not: true,\n    if: true,\n    then: true,\n    else: true\n};\nconst schemaArrayKeyword = {\n    prefixItems: true,\n    items: true,\n    allOf: true,\n    anyOf: true,\n    oneOf: true\n};\nconst schemaMapKeyword = {\n    $defs: true,\n    definitions: true,\n    properties: true,\n    patternProperties: true,\n    dependentSchemas: true\n};\nconst ignoredKeyword = {\n    id: true,\n    $id: true,\n    $ref: true,\n    $schema: true,\n    $anchor: true,\n    $vocabulary: true,\n    $comment: true,\n    default: true,\n    enum: true,\n    const: true,\n    required: true,\n    type: true,\n    maximum: true,\n    minimum: true,\n    exclusiveMaximum: true,\n    exclusiveMinimum: true,\n    multipleOf: true,\n    maxLength: true,\n    minLength: true,\n    pattern: true,\n    format: true,\n    maxItems: true,\n    minItems: true,\n    uniqueItems: true,\n    maxProperties: true,\n    minProperties: true\n};\nlet initialBaseURI = typeof self !== \"undefined\" && self.location && self.location.origin !== \"null\" ? new URL(self.location.origin + self.location.pathname + location.search) : new URL(\"https://github.com/cfworker\");\nfunction dereference(schema, lookup = Object.create(null), baseURI = initialBaseURI, basePointer = \"\") {\n    if (schema && typeof schema === \"object\" && !Array.isArray(schema)) {\n        const id = schema.$id || schema.id;\n        if (id) {\n            const url = new URL(id, baseURI.href);\n            if (url.hash.length > 1) {\n                lookup[url.href] = schema;\n            } else {\n                url.hash = \"\";\n                if (basePointer === \"\") {\n                    baseURI = url;\n                } else {\n                    dereference(schema, lookup, baseURI);\n                }\n            }\n        }\n    } else if (schema !== true && schema !== false) {\n        return lookup;\n    }\n    const schemaURI = baseURI.href + (basePointer ? \"#\" + basePointer : \"\");\n    if (lookup[schemaURI] !== undefined) {\n        throw new Error(`Duplicate schema URI \"${schemaURI}\".`);\n    }\n    lookup[schemaURI] = schema;\n    if (schema === true || schema === false) {\n        return lookup;\n    }\n    if (schema.__absolute_uri__ === undefined) {\n        Object.defineProperty(schema, \"__absolute_uri__\", {\n            enumerable: false,\n            value: schemaURI\n        });\n    }\n    if (schema.$ref && schema.__absolute_ref__ === undefined) {\n        const url = new URL(schema.$ref, baseURI.href);\n        url.hash = url.hash;\n        Object.defineProperty(schema, \"__absolute_ref__\", {\n            enumerable: false,\n            value: url.href\n        });\n    }\n    if (schema.$recursiveRef && schema.__absolute_recursive_ref__ === undefined) {\n        const url = new URL(schema.$recursiveRef, baseURI.href);\n        url.hash = url.hash;\n        Object.defineProperty(schema, \"__absolute_recursive_ref__\", {\n            enumerable: false,\n            value: url.href\n        });\n    }\n    if (schema.$anchor) {\n        const url = new URL(\"#\" + schema.$anchor, baseURI.href);\n        lookup[url.href] = schema;\n    }\n    for(let key in schema){\n        if (ignoredKeyword[key]) {\n            continue;\n        }\n        const keyBase = `${basePointer}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_0__.encodePointer)(key)}`;\n        const subSchema = schema[key];\n        if (Array.isArray(subSchema)) {\n            if (schemaArrayKeyword[key]) {\n                const length = subSchema.length;\n                for(let i = 0; i < length; i++){\n                    dereference(subSchema[i], lookup, baseURI, `${keyBase}/${i}`);\n                }\n            }\n        } else if (schemaMapKeyword[key]) {\n            for(let subKey in subSchema){\n                dereference(subSchema[subKey], lookup, baseURI, `${keyBase}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_0__.encodePointer)(subKey)}`);\n            }\n        } else {\n            dereference(subSchema, lookup, baseURI, keyBase);\n        }\n    }\n    return lookup;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@cfworker/json-schema/dist/esm/dereference.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@cfworker/json-schema/dist/esm/format.js":
/*!***************************************************************!*\
  !*** ./node_modules/@cfworker/json-schema/dist/esm/format.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   format: () => (/* binding */ format)\n/* harmony export */ });\nconst DATE = /^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$/;\nconst DAYS = [\n    0,\n    31,\n    28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31\n];\nconst TIME = /^(\\d\\d):(\\d\\d):(\\d\\d)(\\.\\d+)?(z|[+-]\\d\\d(?::?\\d\\d)?)?$/i;\nconst HOSTNAME = /^(?=.{1,253}\\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\\.?$/i;\nconst URIREF = /^(?:[a-z][a-z0-9+\\-.]*:)?(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'\"()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\\?(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;\nconst URITEMPLATE = /^(?:(?:[^\\x00-\\x20\"'<>%\\\\^`{|}]|%[0-9a-f]{2})|\\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?)*\\})*$/i;\nconst URL_ = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u{00a1}-\\u{ffff}0-9]+-?)*[a-z\\u{00a1}-\\u{ffff}0-9]+)(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}0-9]+-?)*[a-z\\u{00a1}-\\u{ffff}0-9]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu;\nconst UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;\nconst JSON_POINTER = /^(?:\\/(?:[^~/]|~0|~1)*)*$/;\nconst JSON_POINTER_URI_FRAGMENT = /^#(?:\\/(?:[a-z0-9_\\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;\nconst RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\\/(?:[^~/]|~0|~1)*)*)$/;\nconst EMAIL = (input)=>{\n    if (input[0] === '\"') return false;\n    const [name, host, ...rest] = input.split(\"@\");\n    if (!name || !host || rest.length !== 0 || name.length > 64 || host.length > 253) return false;\n    if (name[0] === \".\" || name.endsWith(\".\") || name.includes(\"..\")) return false;\n    if (!/^[a-z0-9.-]+$/i.test(host) || !/^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+$/i.test(name)) return false;\n    return host.split(\".\").every((part)=>/^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$/i.test(part));\n};\nconst IPV4 = /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/;\nconst IPV6 = /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))$/i;\nconst DURATION = (input)=>input.length > 1 && input.length < 80 && (/^P\\d+([.,]\\d+)?W$/.test(input) || /^P[\\dYMDTHS]*(\\d[.,]\\d+)?[YMDHS]$/.test(input) && /^P([.,\\d]+Y)?([.,\\d]+M)?([.,\\d]+D)?(T([.,\\d]+H)?([.,\\d]+M)?([.,\\d]+S)?)?$/.test(input));\nfunction bind(r) {\n    return r.test.bind(r);\n}\nconst format = {\n    date,\n    time: time.bind(undefined, false),\n    \"date-time\": date_time,\n    duration: DURATION,\n    uri,\n    \"uri-reference\": bind(URIREF),\n    \"uri-template\": bind(URITEMPLATE),\n    url: bind(URL_),\n    email: EMAIL,\n    hostname: bind(HOSTNAME),\n    ipv4: bind(IPV4),\n    ipv6: bind(IPV6),\n    regex: regex,\n    uuid: bind(UUID),\n    \"json-pointer\": bind(JSON_POINTER),\n    \"json-pointer-uri-fragment\": bind(JSON_POINTER_URI_FRAGMENT),\n    \"relative-json-pointer\": bind(RELATIVE_JSON_POINTER)\n};\nfunction isLeapYear(year) {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\nfunction date(str) {\n    const matches = str.match(DATE);\n    if (!matches) return false;\n    const year = +matches[1];\n    const month = +matches[2];\n    const day = +matches[3];\n    return month >= 1 && month <= 12 && day >= 1 && day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);\n}\nfunction time(full, str) {\n    const matches = str.match(TIME);\n    if (!matches) return false;\n    const hour = +matches[1];\n    const minute = +matches[2];\n    const second = +matches[3];\n    const timeZone = !!matches[5];\n    return (hour <= 23 && minute <= 59 && second <= 59 || hour == 23 && minute == 59 && second == 60) && (!full || timeZone);\n}\nconst DATE_TIME_SEPARATOR = /t|\\s/i;\nfunction date_time(str) {\n    const dateTime = str.split(DATE_TIME_SEPARATOR);\n    return dateTime.length == 2 && date(dateTime[0]) && time(true, dateTime[1]);\n}\nconst NOT_URI_FRAGMENT = /\\/|:/;\nconst URI_PATTERN = /^(?:[a-z][a-z0-9+\\-.]*:)(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\\?(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;\nfunction uri(str) {\n    return NOT_URI_FRAGMENT.test(str) && URI_PATTERN.test(str);\n}\nconst Z_ANCHOR = /[^\\\\]\\\\Z/;\nfunction regex(str) {\n    if (Z_ANCHOR.test(str)) return false;\n    try {\n        new RegExp(str, \"u\");\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@cfworker/json-schema/dist/esm/format.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@cfworker/json-schema/dist/esm/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@cfworker/json-schema/dist/esm/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OutputFormat: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.OutputFormat),\n/* harmony export */   Validator: () => (/* reexport safe */ _validator_js__WEBPACK_IMPORTED_MODULE_7__.Validator),\n/* harmony export */   deepCompareStrict: () => (/* reexport safe */ _deep_compare_strict_js__WEBPACK_IMPORTED_MODULE_0__.deepCompareStrict),\n/* harmony export */   dereference: () => (/* reexport safe */ _dereference_js__WEBPACK_IMPORTED_MODULE_1__.dereference),\n/* harmony export */   encodePointer: () => (/* reexport safe */ _pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer),\n/* harmony export */   escapePointer: () => (/* reexport safe */ _pointer_js__WEBPACK_IMPORTED_MODULE_3__.escapePointer),\n/* harmony export */   format: () => (/* reexport safe */ _format_js__WEBPACK_IMPORTED_MODULE_2__.format),\n/* harmony export */   ignoredKeyword: () => (/* reexport safe */ _dereference_js__WEBPACK_IMPORTED_MODULE_1__.ignoredKeyword),\n/* harmony export */   initialBaseURI: () => (/* reexport safe */ _dereference_js__WEBPACK_IMPORTED_MODULE_1__.initialBaseURI),\n/* harmony export */   schemaArrayKeyword: () => (/* reexport safe */ _dereference_js__WEBPACK_IMPORTED_MODULE_1__.schemaArrayKeyword),\n/* harmony export */   schemaKeyword: () => (/* reexport safe */ _dereference_js__WEBPACK_IMPORTED_MODULE_1__.schemaKeyword),\n/* harmony export */   schemaMapKeyword: () => (/* reexport safe */ _dereference_js__WEBPACK_IMPORTED_MODULE_1__.schemaMapKeyword),\n/* harmony export */   ucs2length: () => (/* reexport safe */ _ucs2_length_js__WEBPACK_IMPORTED_MODULE_5__.ucs2length),\n/* harmony export */   validate: () => (/* reexport safe */ _validate_js__WEBPACK_IMPORTED_MODULE_6__.validate)\n/* harmony export */ });\n/* harmony import */ var _deep_compare_strict_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deep-compare-strict.js */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/deep-compare-strict.js\");\n/* harmony import */ var _dereference_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dereference.js */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/dereference.js\");\n/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./format.js */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/format.js\");\n/* harmony import */ var _pointer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pointer.js */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/pointer.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/types.js\");\n/* harmony import */ var _ucs2_length_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ucs2-length.js */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/ucs2-length.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/validate.js\");\n/* harmony import */ var _validator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./validator.js */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/validator.js\");\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNmd29ya2VyL2pzb24tc2NoZW1hL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBeUM7QUFDUjtBQUNMO0FBQ0M7QUFDRjtBQUNNO0FBQ0g7QUFDQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLW1hcmtldC1yZXNlYXJjaC1hZ2VudC8uL25vZGVfbW9kdWxlcy9AY2Z3b3JrZXIvanNvbi1zY2hlbWEvZGlzdC9lc20vaW5kZXguanM/ODY2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2RlZXAtY29tcGFyZS1zdHJpY3QuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9kZXJlZmVyZW5jZS5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2Zvcm1hdC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3BvaW50ZXIuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3VjczItbGVuZ3RoLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuZXhwb3J0ICogZnJvbSAnLi92YWxpZGF0b3IuanMnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@cfworker/json-schema/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@cfworker/json-schema/dist/esm/pointer.js":
/*!****************************************************************!*\
  !*** ./node_modules/@cfworker/json-schema/dist/esm/pointer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodePointer: () => (/* binding */ encodePointer),\n/* harmony export */   escapePointer: () => (/* binding */ escapePointer)\n/* harmony export */ });\nfunction encodePointer(p) {\n    return encodeURI(escapePointer(p));\n}\nfunction escapePointer(p) {\n    return p.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNmd29ya2VyL2pzb24tc2NoZW1hL2Rpc3QvZXNtL3BvaW50ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxTQUFTQSxjQUFjQyxDQUFDO0lBQzNCLE9BQU9DLFVBQVVDLGNBQWNGO0FBQ25DO0FBQ08sU0FBU0UsY0FBY0YsQ0FBQztJQUMzQixPQUFPQSxFQUFFRyxPQUFPLENBQUMsTUFBTSxNQUFNQSxPQUFPLENBQUMsT0FBTztBQUNoRCIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLW1hcmtldC1yZXNlYXJjaC1hZ2VudC8uL25vZGVfbW9kdWxlcy9AY2Z3b3JrZXIvanNvbi1zY2hlbWEvZGlzdC9lc20vcG9pbnRlci5qcz82MjJlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBlbmNvZGVQb2ludGVyKHApIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJKGVzY2FwZVBvaW50ZXIocCkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZVBvaW50ZXIocCkge1xuICAgIHJldHVybiBwLnJlcGxhY2UoL34vZywgJ34wJykucmVwbGFjZSgvXFwvL2csICd+MScpO1xufVxuIl0sIm5hbWVzIjpbImVuY29kZVBvaW50ZXIiLCJwIiwiZW5jb2RlVVJJIiwiZXNjYXBlUG9pbnRlciIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@cfworker/json-schema/dist/esm/pointer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@cfworker/json-schema/dist/esm/types.js":
/*!**************************************************************!*\
  !*** ./node_modules/@cfworker/json-schema/dist/esm/types.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OutputFormat: () => (/* binding */ OutputFormat)\n/* harmony export */ });\nvar OutputFormat;\n(function(OutputFormat) {\n    OutputFormat[OutputFormat[\"Flag\"] = 1] = \"Flag\";\n    OutputFormat[OutputFormat[\"Basic\"] = 2] = \"Basic\";\n    OutputFormat[OutputFormat[\"Detailed\"] = 4] = \"Detailed\";\n})(OutputFormat || (OutputFormat = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNmd29ya2VyL2pzb24tc2NoZW1hL2Rpc3QvZXNtL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxJQUFJQSxhQUFhO0FBQ3ZCLFVBQVVBLFlBQVk7SUFDbkJBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDekNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFFBQVEsR0FBRyxFQUFFLEdBQUc7SUFDMUNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFdBQVcsR0FBRyxFQUFFLEdBQUc7QUFDakQsR0FBR0EsZ0JBQWlCQSxDQUFBQSxlQUFlLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1tYXJrZXQtcmVzZWFyY2gtYWdlbnQvLi9ub2RlX21vZHVsZXMvQGNmd29ya2VyL2pzb24tc2NoZW1hL2Rpc3QvZXNtL3R5cGVzLmpzPzhiZTQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBPdXRwdXRGb3JtYXQ7XG4oZnVuY3Rpb24gKE91dHB1dEZvcm1hdCkge1xuICAgIE91dHB1dEZvcm1hdFtPdXRwdXRGb3JtYXRbXCJGbGFnXCJdID0gMV0gPSBcIkZsYWdcIjtcbiAgICBPdXRwdXRGb3JtYXRbT3V0cHV0Rm9ybWF0W1wiQmFzaWNcIl0gPSAyXSA9IFwiQmFzaWNcIjtcbiAgICBPdXRwdXRGb3JtYXRbT3V0cHV0Rm9ybWF0W1wiRGV0YWlsZWRcIl0gPSA0XSA9IFwiRGV0YWlsZWRcIjtcbn0pKE91dHB1dEZvcm1hdCB8fCAoT3V0cHV0Rm9ybWF0ID0ge30pKTtcbiJdLCJuYW1lcyI6WyJPdXRwdXRGb3JtYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@cfworker/json-schema/dist/esm/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@cfworker/json-schema/dist/esm/ucs2-length.js":
/*!********************************************************************!*\
  !*** ./node_modules/@cfworker/json-schema/dist/esm/ucs2-length.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ucs2length: () => (/* binding */ ucs2length)\n/* harmony export */ });\nfunction ucs2length(s) {\n    let result = 0;\n    let length = s.length;\n    let index = 0;\n    let charCode;\n    while(index < length){\n        result++;\n        charCode = s.charCodeAt(index++);\n        if (charCode >= 0xd800 && charCode <= 0xdbff && index < length) {\n            charCode = s.charCodeAt(index);\n            if ((charCode & 0xfc00) == 0xdc00) {\n                index++;\n            }\n        }\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNmd29ya2VyL2pzb24tc2NoZW1hL2Rpc3QvZXNtL3VjczItbGVuZ3RoLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxTQUFTQSxXQUFXQyxDQUFDO0lBQ3hCLElBQUlDLFNBQVM7SUFDYixJQUFJQyxTQUFTRixFQUFFRSxNQUFNO0lBQ3JCLElBQUlDLFFBQVE7SUFDWixJQUFJQztJQUNKLE1BQU9ELFFBQVFELE9BQVE7UUFDbkJEO1FBQ0FHLFdBQVdKLEVBQUVLLFVBQVUsQ0FBQ0Y7UUFDeEIsSUFBSUMsWUFBWSxVQUFVQSxZQUFZLFVBQVVELFFBQVFELFFBQVE7WUFDNURFLFdBQVdKLEVBQUVLLFVBQVUsQ0FBQ0Y7WUFDeEIsSUFBSSxDQUFDQyxXQUFXLE1BQUssS0FBTSxRQUFRO2dCQUMvQkQ7WUFDSjtRQUNKO0lBQ0o7SUFDQSxPQUFPRjtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktbWFya2V0LXJlc2VhcmNoLWFnZW50Ly4vbm9kZV9tb2R1bGVzL0BjZndvcmtlci9qc29uLXNjaGVtYS9kaXN0L2VzbS91Y3MyLWxlbmd0aC5qcz9hMTFlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiB1Y3MybGVuZ3RoKHMpIHtcbiAgICBsZXQgcmVzdWx0ID0gMDtcbiAgICBsZXQgbGVuZ3RoID0gcy5sZW5ndGg7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBsZXQgY2hhckNvZGU7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCsrO1xuICAgICAgICBjaGFyQ29kZSA9IHMuY2hhckNvZGVBdChpbmRleCsrKTtcbiAgICAgICAgaWYgKGNoYXJDb2RlID49IDB4ZDgwMCAmJiBjaGFyQ29kZSA8PSAweGRiZmYgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGNoYXJDb2RlID0gcy5jaGFyQ29kZUF0KGluZGV4KTtcbiAgICAgICAgICAgIGlmICgoY2hhckNvZGUgJiAweGZjMDApID09IDB4ZGMwMCkge1xuICAgICAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJuYW1lcyI6WyJ1Y3MybGVuZ3RoIiwicyIsInJlc3VsdCIsImxlbmd0aCIsImluZGV4IiwiY2hhckNvZGUiLCJjaGFyQ29kZUF0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@cfworker/json-schema/dist/esm/ucs2-length.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@cfworker/json-schema/dist/esm/validate.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@cfworker/json-schema/dist/esm/validate.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validate: () => (/* binding */ validate)\n/* harmony export */ });\n/* harmony import */ var _deep_compare_strict_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deep-compare-strict.js */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/deep-compare-strict.js\");\n/* harmony import */ var _dereference_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dereference.js */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/dereference.js\");\n/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./format.js */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/format.js\");\n/* harmony import */ var _pointer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pointer.js */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/pointer.js\");\n/* harmony import */ var _ucs2_length_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ucs2-length.js */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/ucs2-length.js\");\n\n\n\n\n\nfunction validate(instance, schema, draft = \"2019-09\", lookup = (0,_dereference_js__WEBPACK_IMPORTED_MODULE_1__.dereference)(schema), shortCircuit = true, recursiveAnchor = null, instanceLocation = \"#\", schemaLocation = \"#\", evaluated = Object.create(null)) {\n    if (schema === true) {\n        return {\n            valid: true,\n            errors: []\n        };\n    }\n    if (schema === false) {\n        return {\n            valid: false,\n            errors: [\n                {\n                    instanceLocation,\n                    keyword: \"false\",\n                    keywordLocation: instanceLocation,\n                    error: \"False boolean schema.\"\n                }\n            ]\n        };\n    }\n    const rawInstanceType = typeof instance;\n    let instanceType;\n    switch(rawInstanceType){\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n            instanceType = rawInstanceType;\n            break;\n        case \"object\":\n            if (instance === null) {\n                instanceType = \"null\";\n            } else if (Array.isArray(instance)) {\n                instanceType = \"array\";\n            } else {\n                instanceType = \"object\";\n            }\n            break;\n        default:\n            throw new Error(`Instances of \"${rawInstanceType}\" type are not supported.`);\n    }\n    const { $ref, $recursiveRef, $recursiveAnchor, type: $type, const: $const, enum: $enum, required: $required, not: $not, anyOf: $anyOf, allOf: $allOf, oneOf: $oneOf, if: $if, then: $then, else: $else, format: $format, properties: $properties, patternProperties: $patternProperties, additionalProperties: $additionalProperties, unevaluatedProperties: $unevaluatedProperties, minProperties: $minProperties, maxProperties: $maxProperties, propertyNames: $propertyNames, dependentRequired: $dependentRequired, dependentSchemas: $dependentSchemas, dependencies: $dependencies, prefixItems: $prefixItems, items: $items, additionalItems: $additionalItems, unevaluatedItems: $unevaluatedItems, contains: $contains, minContains: $minContains, maxContains: $maxContains, minItems: $minItems, maxItems: $maxItems, uniqueItems: $uniqueItems, minimum: $minimum, maximum: $maximum, exclusiveMinimum: $exclusiveMinimum, exclusiveMaximum: $exclusiveMaximum, multipleOf: $multipleOf, minLength: $minLength, maxLength: $maxLength, pattern: $pattern, __absolute_ref__, __absolute_recursive_ref__ } = schema;\n    const errors = [];\n    if ($recursiveAnchor === true && recursiveAnchor === null) {\n        recursiveAnchor = schema;\n    }\n    if ($recursiveRef === \"#\") {\n        const refSchema = recursiveAnchor === null ? lookup[__absolute_recursive_ref__] : recursiveAnchor;\n        const keywordLocation = `${schemaLocation}/$recursiveRef`;\n        const result = validate(instance, recursiveAnchor === null ? schema : recursiveAnchor, draft, lookup, shortCircuit, refSchema, instanceLocation, keywordLocation, evaluated);\n        if (!result.valid) {\n            errors.push({\n                instanceLocation,\n                keyword: \"$recursiveRef\",\n                keywordLocation,\n                error: \"A subschema had errors.\"\n            }, ...result.errors);\n        }\n    }\n    if ($ref !== undefined) {\n        const uri = __absolute_ref__ || $ref;\n        const refSchema = lookup[uri];\n        if (refSchema === undefined) {\n            let message = `Unresolved $ref \"${$ref}\".`;\n            if (__absolute_ref__ && __absolute_ref__ !== $ref) {\n                message += `  Absolute URI \"${__absolute_ref__}\".`;\n            }\n            message += `\\nKnown schemas:\\n- ${Object.keys(lookup).join(\"\\n- \")}`;\n            throw new Error(message);\n        }\n        const keywordLocation = `${schemaLocation}/$ref`;\n        const result = validate(instance, refSchema, draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, keywordLocation, evaluated);\n        if (!result.valid) {\n            errors.push({\n                instanceLocation,\n                keyword: \"$ref\",\n                keywordLocation,\n                error: \"A subschema had errors.\"\n            }, ...result.errors);\n        }\n        if (draft === \"4\" || draft === \"7\") {\n            return {\n                valid: errors.length === 0,\n                errors\n            };\n        }\n    }\n    if (Array.isArray($type)) {\n        let length = $type.length;\n        let valid = false;\n        for(let i = 0; i < length; i++){\n            if (instanceType === $type[i] || $type[i] === \"integer\" && instanceType === \"number\" && instance % 1 === 0 && instance === instance) {\n                valid = true;\n                break;\n            }\n        }\n        if (!valid) {\n            errors.push({\n                instanceLocation,\n                keyword: \"type\",\n                keywordLocation: `${schemaLocation}/type`,\n                error: `Instance type \"${instanceType}\" is invalid. Expected \"${$type.join('\", \"')}\".`\n            });\n        }\n    } else if ($type === \"integer\") {\n        if (instanceType !== \"number\" || instance % 1 || instance !== instance) {\n            errors.push({\n                instanceLocation,\n                keyword: \"type\",\n                keywordLocation: `${schemaLocation}/type`,\n                error: `Instance type \"${instanceType}\" is invalid. Expected \"${$type}\".`\n            });\n        }\n    } else if ($type !== undefined && instanceType !== $type) {\n        errors.push({\n            instanceLocation,\n            keyword: \"type\",\n            keywordLocation: `${schemaLocation}/type`,\n            error: `Instance type \"${instanceType}\" is invalid. Expected \"${$type}\".`\n        });\n    }\n    if ($const !== undefined) {\n        if (instanceType === \"object\" || instanceType === \"array\") {\n            if (!(0,_deep_compare_strict_js__WEBPACK_IMPORTED_MODULE_0__.deepCompareStrict)(instance, $const)) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"const\",\n                    keywordLocation: `${schemaLocation}/const`,\n                    error: `Instance does not match ${JSON.stringify($const)}.`\n                });\n            }\n        } else if (instance !== $const) {\n            errors.push({\n                instanceLocation,\n                keyword: \"const\",\n                keywordLocation: `${schemaLocation}/const`,\n                error: `Instance does not match ${JSON.stringify($const)}.`\n            });\n        }\n    }\n    if ($enum !== undefined) {\n        if (instanceType === \"object\" || instanceType === \"array\") {\n            if (!$enum.some((value)=>(0,_deep_compare_strict_js__WEBPACK_IMPORTED_MODULE_0__.deepCompareStrict)(instance, value))) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"enum\",\n                    keywordLocation: `${schemaLocation}/enum`,\n                    error: `Instance does not match any of ${JSON.stringify($enum)}.`\n                });\n            }\n        } else if (!$enum.some((value)=>instance === value)) {\n            errors.push({\n                instanceLocation,\n                keyword: \"enum\",\n                keywordLocation: `${schemaLocation}/enum`,\n                error: `Instance does not match any of ${JSON.stringify($enum)}.`\n            });\n        }\n    }\n    if ($not !== undefined) {\n        const keywordLocation = `${schemaLocation}/not`;\n        const result = validate(instance, $not, draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, keywordLocation);\n        if (result.valid) {\n            errors.push({\n                instanceLocation,\n                keyword: \"not\",\n                keywordLocation,\n                error: 'Instance matched \"not\" schema.'\n            });\n        }\n    }\n    let subEvaluateds = [];\n    if ($anyOf !== undefined) {\n        const keywordLocation = `${schemaLocation}/anyOf`;\n        const errorsLength = errors.length;\n        let anyValid = false;\n        for(let i = 0; i < $anyOf.length; i++){\n            const subSchema = $anyOf[i];\n            const subEvaluated = Object.create(evaluated);\n            const result = validate(instance, subSchema, draft, lookup, shortCircuit, $recursiveAnchor === true ? recursiveAnchor : null, instanceLocation, `${keywordLocation}/${i}`, subEvaluated);\n            errors.push(...result.errors);\n            anyValid = anyValid || result.valid;\n            if (result.valid) {\n                subEvaluateds.push(subEvaluated);\n            }\n        }\n        if (anyValid) {\n            errors.length = errorsLength;\n        } else {\n            errors.splice(errorsLength, 0, {\n                instanceLocation,\n                keyword: \"anyOf\",\n                keywordLocation,\n                error: \"Instance does not match any subschemas.\"\n            });\n        }\n    }\n    if ($allOf !== undefined) {\n        const keywordLocation = `${schemaLocation}/allOf`;\n        const errorsLength = errors.length;\n        let allValid = true;\n        for(let i = 0; i < $allOf.length; i++){\n            const subSchema = $allOf[i];\n            const subEvaluated = Object.create(evaluated);\n            const result = validate(instance, subSchema, draft, lookup, shortCircuit, $recursiveAnchor === true ? recursiveAnchor : null, instanceLocation, `${keywordLocation}/${i}`, subEvaluated);\n            errors.push(...result.errors);\n            allValid = allValid && result.valid;\n            if (result.valid) {\n                subEvaluateds.push(subEvaluated);\n            }\n        }\n        if (allValid) {\n            errors.length = errorsLength;\n        } else {\n            errors.splice(errorsLength, 0, {\n                instanceLocation,\n                keyword: \"allOf\",\n                keywordLocation,\n                error: `Instance does not match every subschema.`\n            });\n        }\n    }\n    if ($oneOf !== undefined) {\n        const keywordLocation = `${schemaLocation}/oneOf`;\n        const errorsLength = errors.length;\n        const matches = $oneOf.filter((subSchema, i)=>{\n            const subEvaluated = Object.create(evaluated);\n            const result = validate(instance, subSchema, draft, lookup, shortCircuit, $recursiveAnchor === true ? recursiveAnchor : null, instanceLocation, `${keywordLocation}/${i}`, subEvaluated);\n            errors.push(...result.errors);\n            if (result.valid) {\n                subEvaluateds.push(subEvaluated);\n            }\n            return result.valid;\n        }).length;\n        if (matches === 1) {\n            errors.length = errorsLength;\n        } else {\n            errors.splice(errorsLength, 0, {\n                instanceLocation,\n                keyword: \"oneOf\",\n                keywordLocation,\n                error: `Instance does not match exactly one subschema (${matches} matches).`\n            });\n        }\n    }\n    if (instanceType === \"object\" || instanceType === \"array\") {\n        Object.assign(evaluated, ...subEvaluateds);\n    }\n    if ($if !== undefined) {\n        const keywordLocation = `${schemaLocation}/if`;\n        const conditionResult = validate(instance, $if, draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, keywordLocation, evaluated).valid;\n        if (conditionResult) {\n            if ($then !== undefined) {\n                const thenResult = validate(instance, $then, draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, `${schemaLocation}/then`, evaluated);\n                if (!thenResult.valid) {\n                    errors.push({\n                        instanceLocation,\n                        keyword: \"if\",\n                        keywordLocation,\n                        error: `Instance does not match \"then\" schema.`\n                    }, ...thenResult.errors);\n                }\n            }\n        } else if ($else !== undefined) {\n            const elseResult = validate(instance, $else, draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, `${schemaLocation}/else`, evaluated);\n            if (!elseResult.valid) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"if\",\n                    keywordLocation,\n                    error: `Instance does not match \"else\" schema.`\n                }, ...elseResult.errors);\n            }\n        }\n    }\n    if (instanceType === \"object\") {\n        if ($required !== undefined) {\n            for (const key of $required){\n                if (!(key in instance)) {\n                    errors.push({\n                        instanceLocation,\n                        keyword: \"required\",\n                        keywordLocation: `${schemaLocation}/required`,\n                        error: `Instance does not have required property \"${key}\".`\n                    });\n                }\n            }\n        }\n        const keys = Object.keys(instance);\n        if ($minProperties !== undefined && keys.length < $minProperties) {\n            errors.push({\n                instanceLocation,\n                keyword: \"minProperties\",\n                keywordLocation: `${schemaLocation}/minProperties`,\n                error: `Instance does not have at least ${$minProperties} properties.`\n            });\n        }\n        if ($maxProperties !== undefined && keys.length > $maxProperties) {\n            errors.push({\n                instanceLocation,\n                keyword: \"maxProperties\",\n                keywordLocation: `${schemaLocation}/maxProperties`,\n                error: `Instance does not have at least ${$maxProperties} properties.`\n            });\n        }\n        if ($propertyNames !== undefined) {\n            const keywordLocation = `${schemaLocation}/propertyNames`;\n            for(const key in instance){\n                const subInstancePointer = `${instanceLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`;\n                const result = validate(key, $propertyNames, draft, lookup, shortCircuit, recursiveAnchor, subInstancePointer, keywordLocation);\n                if (!result.valid) {\n                    errors.push({\n                        instanceLocation,\n                        keyword: \"propertyNames\",\n                        keywordLocation,\n                        error: `Property name \"${key}\" does not match schema.`\n                    }, ...result.errors);\n                }\n            }\n        }\n        if ($dependentRequired !== undefined) {\n            const keywordLocation = `${schemaLocation}/dependantRequired`;\n            for(const key in $dependentRequired){\n                if (key in instance) {\n                    const required = $dependentRequired[key];\n                    for (const dependantKey of required){\n                        if (!(dependantKey in instance)) {\n                            errors.push({\n                                instanceLocation,\n                                keyword: \"dependentRequired\",\n                                keywordLocation,\n                                error: `Instance has \"${key}\" but does not have \"${dependantKey}\".`\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        if ($dependentSchemas !== undefined) {\n            for(const key in $dependentSchemas){\n                const keywordLocation = `${schemaLocation}/dependentSchemas`;\n                if (key in instance) {\n                    const result = validate(instance, $dependentSchemas[key], draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, `${keywordLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`, evaluated);\n                    if (!result.valid) {\n                        errors.push({\n                            instanceLocation,\n                            keyword: \"dependentSchemas\",\n                            keywordLocation,\n                            error: `Instance has \"${key}\" but does not match dependant schema.`\n                        }, ...result.errors);\n                    }\n                }\n            }\n        }\n        if ($dependencies !== undefined) {\n            const keywordLocation = `${schemaLocation}/dependencies`;\n            for(const key in $dependencies){\n                if (key in instance) {\n                    const propsOrSchema = $dependencies[key];\n                    if (Array.isArray(propsOrSchema)) {\n                        for (const dependantKey of propsOrSchema){\n                            if (!(dependantKey in instance)) {\n                                errors.push({\n                                    instanceLocation,\n                                    keyword: \"dependencies\",\n                                    keywordLocation,\n                                    error: `Instance has \"${key}\" but does not have \"${dependantKey}\".`\n                                });\n                            }\n                        }\n                    } else {\n                        const result = validate(instance, propsOrSchema, draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, `${keywordLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`);\n                        if (!result.valid) {\n                            errors.push({\n                                instanceLocation,\n                                keyword: \"dependencies\",\n                                keywordLocation,\n                                error: `Instance has \"${key}\" but does not match dependant schema.`\n                            }, ...result.errors);\n                        }\n                    }\n                }\n            }\n        }\n        const thisEvaluated = Object.create(null);\n        let stop = false;\n        if ($properties !== undefined) {\n            const keywordLocation = `${schemaLocation}/properties`;\n            for(const key in $properties){\n                if (!(key in instance)) {\n                    continue;\n                }\n                const subInstancePointer = `${instanceLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`;\n                const result = validate(instance[key], $properties[key], draft, lookup, shortCircuit, recursiveAnchor, subInstancePointer, `${keywordLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`);\n                if (result.valid) {\n                    evaluated[key] = thisEvaluated[key] = true;\n                } else {\n                    stop = shortCircuit;\n                    errors.push({\n                        instanceLocation,\n                        keyword: \"properties\",\n                        keywordLocation,\n                        error: `Property \"${key}\" does not match schema.`\n                    }, ...result.errors);\n                    if (stop) break;\n                }\n            }\n        }\n        if (!stop && $patternProperties !== undefined) {\n            const keywordLocation = `${schemaLocation}/patternProperties`;\n            for(const pattern in $patternProperties){\n                const regex = new RegExp(pattern, \"u\");\n                const subSchema = $patternProperties[pattern];\n                for(const key in instance){\n                    if (!regex.test(key)) {\n                        continue;\n                    }\n                    const subInstancePointer = `${instanceLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`;\n                    const result = validate(instance[key], subSchema, draft, lookup, shortCircuit, recursiveAnchor, subInstancePointer, `${keywordLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(pattern)}`);\n                    if (result.valid) {\n                        evaluated[key] = thisEvaluated[key] = true;\n                    } else {\n                        stop = shortCircuit;\n                        errors.push({\n                            instanceLocation,\n                            keyword: \"patternProperties\",\n                            keywordLocation,\n                            error: `Property \"${key}\" matches pattern \"${pattern}\" but does not match associated schema.`\n                        }, ...result.errors);\n                    }\n                }\n            }\n        }\n        if (!stop && $additionalProperties !== undefined) {\n            const keywordLocation = `${schemaLocation}/additionalProperties`;\n            for(const key in instance){\n                if (thisEvaluated[key]) {\n                    continue;\n                }\n                const subInstancePointer = `${instanceLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`;\n                const result = validate(instance[key], $additionalProperties, draft, lookup, shortCircuit, recursiveAnchor, subInstancePointer, keywordLocation);\n                if (result.valid) {\n                    evaluated[key] = true;\n                } else {\n                    stop = shortCircuit;\n                    errors.push({\n                        instanceLocation,\n                        keyword: \"additionalProperties\",\n                        keywordLocation,\n                        error: `Property \"${key}\" does not match additional properties schema.`\n                    }, ...result.errors);\n                }\n            }\n        } else if (!stop && $unevaluatedProperties !== undefined) {\n            const keywordLocation = `${schemaLocation}/unevaluatedProperties`;\n            for(const key in instance){\n                if (!evaluated[key]) {\n                    const subInstancePointer = `${instanceLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`;\n                    const result = validate(instance[key], $unevaluatedProperties, draft, lookup, shortCircuit, recursiveAnchor, subInstancePointer, keywordLocation);\n                    if (result.valid) {\n                        evaluated[key] = true;\n                    } else {\n                        errors.push({\n                            instanceLocation,\n                            keyword: \"unevaluatedProperties\",\n                            keywordLocation,\n                            error: `Property \"${key}\" does not match unevaluated properties schema.`\n                        }, ...result.errors);\n                    }\n                }\n            }\n        }\n    } else if (instanceType === \"array\") {\n        if ($maxItems !== undefined && instance.length > $maxItems) {\n            errors.push({\n                instanceLocation,\n                keyword: \"maxItems\",\n                keywordLocation: `${schemaLocation}/maxItems`,\n                error: `Array has too many items (${instance.length} > ${$maxItems}).`\n            });\n        }\n        if ($minItems !== undefined && instance.length < $minItems) {\n            errors.push({\n                instanceLocation,\n                keyword: \"minItems\",\n                keywordLocation: `${schemaLocation}/minItems`,\n                error: `Array has too few items (${instance.length} < ${$minItems}).`\n            });\n        }\n        const length = instance.length;\n        let i = 0;\n        let stop = false;\n        if ($prefixItems !== undefined) {\n            const keywordLocation = `${schemaLocation}/prefixItems`;\n            const length2 = Math.min($prefixItems.length, length);\n            for(; i < length2; i++){\n                const result = validate(instance[i], $prefixItems[i], draft, lookup, shortCircuit, recursiveAnchor, `${instanceLocation}/${i}`, `${keywordLocation}/${i}`);\n                evaluated[i] = true;\n                if (!result.valid) {\n                    stop = shortCircuit;\n                    errors.push({\n                        instanceLocation,\n                        keyword: \"prefixItems\",\n                        keywordLocation,\n                        error: `Items did not match schema.`\n                    }, ...result.errors);\n                    if (stop) break;\n                }\n            }\n        }\n        if ($items !== undefined) {\n            const keywordLocation = `${schemaLocation}/items`;\n            if (Array.isArray($items)) {\n                const length2 = Math.min($items.length, length);\n                for(; i < length2; i++){\n                    const result = validate(instance[i], $items[i], draft, lookup, shortCircuit, recursiveAnchor, `${instanceLocation}/${i}`, `${keywordLocation}/${i}`);\n                    evaluated[i] = true;\n                    if (!result.valid) {\n                        stop = shortCircuit;\n                        errors.push({\n                            instanceLocation,\n                            keyword: \"items\",\n                            keywordLocation,\n                            error: `Items did not match schema.`\n                        }, ...result.errors);\n                        if (stop) break;\n                    }\n                }\n            } else {\n                for(; i < length; i++){\n                    const result = validate(instance[i], $items, draft, lookup, shortCircuit, recursiveAnchor, `${instanceLocation}/${i}`, keywordLocation);\n                    evaluated[i] = true;\n                    if (!result.valid) {\n                        stop = shortCircuit;\n                        errors.push({\n                            instanceLocation,\n                            keyword: \"items\",\n                            keywordLocation,\n                            error: `Items did not match schema.`\n                        }, ...result.errors);\n                        if (stop) break;\n                    }\n                }\n            }\n            if (!stop && $additionalItems !== undefined) {\n                const keywordLocation = `${schemaLocation}/additionalItems`;\n                for(; i < length; i++){\n                    const result = validate(instance[i], $additionalItems, draft, lookup, shortCircuit, recursiveAnchor, `${instanceLocation}/${i}`, keywordLocation);\n                    evaluated[i] = true;\n                    if (!result.valid) {\n                        stop = shortCircuit;\n                        errors.push({\n                            instanceLocation,\n                            keyword: \"additionalItems\",\n                            keywordLocation,\n                            error: `Items did not match additional items schema.`\n                        }, ...result.errors);\n                    }\n                }\n            }\n        }\n        if ($contains !== undefined) {\n            if (length === 0 && $minContains === undefined) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"contains\",\n                    keywordLocation: `${schemaLocation}/contains`,\n                    error: `Array is empty. It must contain at least one item matching the schema.`\n                });\n            } else if ($minContains !== undefined && length < $minContains) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"minContains\",\n                    keywordLocation: `${schemaLocation}/minContains`,\n                    error: `Array has less items (${length}) than minContains (${$minContains}).`\n                });\n            } else {\n                const keywordLocation = `${schemaLocation}/contains`;\n                const errorsLength = errors.length;\n                let contained = 0;\n                for(let j = 0; j < length; j++){\n                    const result = validate(instance[j], $contains, draft, lookup, shortCircuit, recursiveAnchor, `${instanceLocation}/${j}`, keywordLocation);\n                    if (result.valid) {\n                        evaluated[j] = true;\n                        contained++;\n                    } else {\n                        errors.push(...result.errors);\n                    }\n                }\n                if (contained >= ($minContains || 0)) {\n                    errors.length = errorsLength;\n                }\n                if ($minContains === undefined && $maxContains === undefined && contained === 0) {\n                    errors.splice(errorsLength, 0, {\n                        instanceLocation,\n                        keyword: \"contains\",\n                        keywordLocation,\n                        error: `Array does not contain item matching schema.`\n                    });\n                } else if ($minContains !== undefined && contained < $minContains) {\n                    errors.push({\n                        instanceLocation,\n                        keyword: \"minContains\",\n                        keywordLocation: `${schemaLocation}/minContains`,\n                        error: `Array must contain at least ${$minContains} items matching schema. Only ${contained} items were found.`\n                    });\n                } else if ($maxContains !== undefined && contained > $maxContains) {\n                    errors.push({\n                        instanceLocation,\n                        keyword: \"maxContains\",\n                        keywordLocation: `${schemaLocation}/maxContains`,\n                        error: `Array may contain at most ${$maxContains} items matching schema. ${contained} items were found.`\n                    });\n                }\n            }\n        }\n        if (!stop && $unevaluatedItems !== undefined) {\n            const keywordLocation = `${schemaLocation}/unevaluatedItems`;\n            for(i; i < length; i++){\n                if (evaluated[i]) {\n                    continue;\n                }\n                const result = validate(instance[i], $unevaluatedItems, draft, lookup, shortCircuit, recursiveAnchor, `${instanceLocation}/${i}`, keywordLocation);\n                evaluated[i] = true;\n                if (!result.valid) {\n                    errors.push({\n                        instanceLocation,\n                        keyword: \"unevaluatedItems\",\n                        keywordLocation,\n                        error: `Items did not match unevaluated items schema.`\n                    }, ...result.errors);\n                }\n            }\n        }\n        if ($uniqueItems) {\n            for(let j = 0; j < length; j++){\n                const a = instance[j];\n                const ao = typeof a === \"object\" && a !== null;\n                for(let k = 0; k < length; k++){\n                    if (j === k) {\n                        continue;\n                    }\n                    const b = instance[k];\n                    const bo = typeof b === \"object\" && b !== null;\n                    if (a === b || ao && bo && (0,_deep_compare_strict_js__WEBPACK_IMPORTED_MODULE_0__.deepCompareStrict)(a, b)) {\n                        errors.push({\n                            instanceLocation,\n                            keyword: \"uniqueItems\",\n                            keywordLocation: `${schemaLocation}/uniqueItems`,\n                            error: `Duplicate items at indexes ${j} and ${k}.`\n                        });\n                        j = Number.MAX_SAFE_INTEGER;\n                        k = Number.MAX_SAFE_INTEGER;\n                    }\n                }\n            }\n        }\n    } else if (instanceType === \"number\") {\n        if (draft === \"4\") {\n            if ($minimum !== undefined && ($exclusiveMinimum === true && instance <= $minimum || instance < $minimum)) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"minimum\",\n                    keywordLocation: `${schemaLocation}/minimum`,\n                    error: `${instance} is less than ${$exclusiveMinimum ? \"or equal to \" : \"\"} ${$minimum}.`\n                });\n            }\n            if ($maximum !== undefined && ($exclusiveMaximum === true && instance >= $maximum || instance > $maximum)) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"maximum\",\n                    keywordLocation: `${schemaLocation}/maximum`,\n                    error: `${instance} is greater than ${$exclusiveMaximum ? \"or equal to \" : \"\"} ${$maximum}.`\n                });\n            }\n        } else {\n            if ($minimum !== undefined && instance < $minimum) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"minimum\",\n                    keywordLocation: `${schemaLocation}/minimum`,\n                    error: `${instance} is less than ${$minimum}.`\n                });\n            }\n            if ($maximum !== undefined && instance > $maximum) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"maximum\",\n                    keywordLocation: `${schemaLocation}/maximum`,\n                    error: `${instance} is greater than ${$maximum}.`\n                });\n            }\n            if ($exclusiveMinimum !== undefined && instance <= $exclusiveMinimum) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"exclusiveMinimum\",\n                    keywordLocation: `${schemaLocation}/exclusiveMinimum`,\n                    error: `${instance} is less than ${$exclusiveMinimum}.`\n                });\n            }\n            if ($exclusiveMaximum !== undefined && instance >= $exclusiveMaximum) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"exclusiveMaximum\",\n                    keywordLocation: `${schemaLocation}/exclusiveMaximum`,\n                    error: `${instance} is greater than or equal to ${$exclusiveMaximum}.`\n                });\n            }\n        }\n        if ($multipleOf !== undefined) {\n            const remainder = instance % $multipleOf;\n            if (Math.abs(0 - remainder) >= 1.1920929e-7 && Math.abs($multipleOf - remainder) >= 1.1920929e-7) {\n                errors.push({\n                    instanceLocation,\n                    keyword: \"multipleOf\",\n                    keywordLocation: `${schemaLocation}/multipleOf`,\n                    error: `${instance} is not a multiple of ${$multipleOf}.`\n                });\n            }\n        }\n    } else if (instanceType === \"string\") {\n        const length = $minLength === undefined && $maxLength === undefined ? 0 : (0,_ucs2_length_js__WEBPACK_IMPORTED_MODULE_4__.ucs2length)(instance);\n        if ($minLength !== undefined && length < $minLength) {\n            errors.push({\n                instanceLocation,\n                keyword: \"minLength\",\n                keywordLocation: `${schemaLocation}/minLength`,\n                error: `String is too short (${length} < ${$minLength}).`\n            });\n        }\n        if ($maxLength !== undefined && length > $maxLength) {\n            errors.push({\n                instanceLocation,\n                keyword: \"maxLength\",\n                keywordLocation: `${schemaLocation}/maxLength`,\n                error: `String is too long (${length} > ${$maxLength}).`\n            });\n        }\n        if ($pattern !== undefined && !new RegExp($pattern, \"u\").test(instance)) {\n            errors.push({\n                instanceLocation,\n                keyword: \"pattern\",\n                keywordLocation: `${schemaLocation}/pattern`,\n                error: `String does not match pattern.`\n            });\n        }\n        if ($format !== undefined && _format_js__WEBPACK_IMPORTED_MODULE_2__.format[$format] && !_format_js__WEBPACK_IMPORTED_MODULE_2__.format[$format](instance)) {\n            errors.push({\n                instanceLocation,\n                keyword: \"format\",\n                keywordLocation: `${schemaLocation}/format`,\n                error: `String does not match format \"${$format}\".`\n            });\n        }\n    }\n    return {\n        valid: errors.length === 0,\n        errors\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@cfworker/json-schema/dist/esm/validate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@cfworker/json-schema/dist/esm/validator.js":
/*!******************************************************************!*\
  !*** ./node_modules/@cfworker/json-schema/dist/esm/validator.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Validator: () => (/* binding */ Validator)\n/* harmony export */ });\n/* harmony import */ var _dereference_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dereference.js */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/dereference.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/validate.js\");\n\n\nclass Validator {\n    constructor(schema, draft = \"2019-09\", shortCircuit = true){\n        this.schema = schema;\n        this.draft = draft;\n        this.shortCircuit = shortCircuit;\n        this.lookup = (0,_dereference_js__WEBPACK_IMPORTED_MODULE_0__.dereference)(schema);\n    }\n    validate(instance) {\n        return (0,_validate_js__WEBPACK_IMPORTED_MODULE_1__.validate)(instance, this.schema, this.draft, this.lookup, this.shortCircuit);\n    }\n    addSchema(schema, id) {\n        if (id) {\n            schema = {\n                ...schema,\n                $id: id\n            };\n        }\n        (0,_dereference_js__WEBPACK_IMPORTED_MODULE_0__.dereference)(schema, this.lookup);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGNmd29ya2VyL2pzb24tc2NoZW1hL2Rpc3QvZXNtL3ZhbGlkYXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0M7QUFDTjtBQUNsQyxNQUFNRTtJQUtUQyxZQUFZQyxNQUFNLEVBQUVDLFFBQVEsU0FBUyxFQUFFQyxlQUFlLElBQUksQ0FBRTtRQUN4RCxJQUFJLENBQUNGLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNDLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNDLFlBQVksR0FBR0E7UUFDcEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdQLDREQUFXQSxDQUFDSTtJQUM5QjtJQUNBSCxTQUFTTyxRQUFRLEVBQUU7UUFDZixPQUFPUCxzREFBUUEsQ0FBQ08sVUFBVSxJQUFJLENBQUNKLE1BQU0sRUFBRSxJQUFJLENBQUNDLEtBQUssRUFBRSxJQUFJLENBQUNFLE1BQU0sRUFBRSxJQUFJLENBQUNELFlBQVk7SUFDckY7SUFDQUcsVUFBVUwsTUFBTSxFQUFFTSxFQUFFLEVBQUU7UUFDbEIsSUFBSUEsSUFBSTtZQUNKTixTQUFTO2dCQUFFLEdBQUdBLE1BQU07Z0JBQUVPLEtBQUtEO1lBQUc7UUFDbEM7UUFDQVYsNERBQVdBLENBQUNJLFFBQVEsSUFBSSxDQUFDRyxNQUFNO0lBQ25DO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1tYXJrZXQtcmVzZWFyY2gtYWdlbnQvLi9ub2RlX21vZHVsZXMvQGNmd29ya2VyL2pzb24tc2NoZW1hL2Rpc3QvZXNtL3ZhbGlkYXRvci5qcz85Njk3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlcmVmZXJlbmNlIH0gZnJvbSAnLi9kZXJlZmVyZW5jZS5qcyc7XG5pbXBvcnQgeyB2YWxpZGF0ZSB9IGZyb20gJy4vdmFsaWRhdGUuanMnO1xuZXhwb3J0IGNsYXNzIFZhbGlkYXRvciB7XG4gICAgc2NoZW1hO1xuICAgIGRyYWZ0O1xuICAgIHNob3J0Q2lyY3VpdDtcbiAgICBsb29rdXA7XG4gICAgY29uc3RydWN0b3Ioc2NoZW1hLCBkcmFmdCA9ICcyMDE5LTA5Jywgc2hvcnRDaXJjdWl0ID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnNjaGVtYSA9IHNjaGVtYTtcbiAgICAgICAgdGhpcy5kcmFmdCA9IGRyYWZ0O1xuICAgICAgICB0aGlzLnNob3J0Q2lyY3VpdCA9IHNob3J0Q2lyY3VpdDtcbiAgICAgICAgdGhpcy5sb29rdXAgPSBkZXJlZmVyZW5jZShzY2hlbWEpO1xuICAgIH1cbiAgICB2YWxpZGF0ZShpbnN0YW5jZSkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUoaW5zdGFuY2UsIHRoaXMuc2NoZW1hLCB0aGlzLmRyYWZ0LCB0aGlzLmxvb2t1cCwgdGhpcy5zaG9ydENpcmN1aXQpO1xuICAgIH1cbiAgICBhZGRTY2hlbWEoc2NoZW1hLCBpZCkge1xuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIHNjaGVtYSA9IHsgLi4uc2NoZW1hLCAkaWQ6IGlkIH07XG4gICAgICAgIH1cbiAgICAgICAgZGVyZWZlcmVuY2Uoc2NoZW1hLCB0aGlzLmxvb2t1cCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImRlcmVmZXJlbmNlIiwidmFsaWRhdGUiLCJWYWxpZGF0b3IiLCJjb25zdHJ1Y3RvciIsInNjaGVtYSIsImRyYWZ0Iiwic2hvcnRDaXJjdWl0IiwibG9va3VwIiwiaW5zdGFuY2UiLCJhZGRTY2hlbWEiLCJpZCIsIiRpZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@cfworker/json-schema/dist/esm/validator.js\n");

/***/ })

};
;